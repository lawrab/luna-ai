[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "luna-ai"
dynamic = ["version"]
description = "L.U.N.A. - Logical Unified Network Assistant"
readme = "README.md"
requires-python = ">=3.11"
license = {file = "LICENSE"}
authors = [
    {name = "Your Name", email = "you@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "asyncio-mqtt>=0.16.2",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "langchain>=0.3.27",
    "langchain-core>=0.3.72",
    "langchain-ollama>=0.3.6",
    "langsmith>=0.4.13",
    "ollama>=0.5.2",
    "openai-whisper>=20240930",
    "pyaudio>=0.2.11",
    "torch>=2.1.2",
    "numpy>=1.26.4",
    "httpx>=0.28.1",
    "aiohttp>=3.12.15",
    "rich>=13.7.1",
    "click>=8.1.7",
    "python-dotenv>=1.1.1",
    "PyYAML>=6.0.2",
    "structlog>=24.5.0",
    "tenacity>=9.1.2",
    "typing_extensions>=4.14.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.23.8",
    "pytest-mock>=3.12.0",
    "pytest-cov>=5.0.0",
    "mypy>=1.11.2",
    "black>=24.8.0",
    "isort>=5.12.0",
    "pre-commit>=3.8.0",
]
monitoring = [
    "opentelemetry-api>=1.27.0",
    "opentelemetry-sdk>=1.27.0",
    "structlog>=24.4.0",
]
security = [
    "cryptography>=43.0.3",
    "bcrypt>=4.1.3",
]

[project.scripts]
luna = "luna.main:main"

[project.urls]
Homepage = "https://github.com/yourusername/luna-ai"
Documentation = "https://github.com/yourusername/luna-ai#readme"
Repository = "https://github.com/yourusername/luna-ai"

[tool.hatch.version]
path = "luna/__init__.py"

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["luna"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "ollama.*",
    "whisper.*",
    "pyaudio.*",
    "numpy.*",
    "torch.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow",
    "requires_audio: marks tests that require audio hardware",
    "requires_ollama: marks tests that require Ollama service",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["luna"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]